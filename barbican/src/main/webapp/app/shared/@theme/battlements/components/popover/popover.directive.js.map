{"version":3,"file":"popover.directive.js","sourceRoot":"","sources":["../../../../../.ng_build/theme/components/popover/popover.directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  ComponentFactoryResolver, ComponentRef, Directive, ElementRef, HostListener, Input, OnDestroy,\n  OnInit, PLATFORM_ID, Inject,\n} from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { NbPositioningHelper } from './helpers/positioning.helper';\nimport { NbPopoverComponent, NbPopoverContent } from './popover.component';\nimport { NbThemeService } from '../../services/theme.service';\nimport { takeWhile } from 'rxjs/operators/takeWhile';\nimport { NbAdjustmentHelper } from './helpers/adjustment.helper';\nimport { NbTriggerHelper } from './helpers/trigger.helper';\nimport { NbPopoverAdjustment, NbPopoverMode, NbPopoverPlacement, NbPopoverPosition } from './helpers/model';\n\n/**\n * Powerful popover directive, which provides the best UX for your users.\n *\n * ![image](assets/images/components/popover.gif)\n *\n * @example Popover can accept different content such as:\n * TemplateRef\n *\n * ```\n * <button [nbPopover]=\"templateRef\"></button>\n * <ng-template #templateRef>\n *   <span>Hello, Popover!</span>\n * </ng-template>\n * ```\n *\n * @example Custom components\n *\n * ```\n * <button [nbPopover]=\"NbCardComponent\"></button>\n * ```\n *\n * @example Primitive types\n *\n * ```\n * <button nbPopover=\"Hello, Popover!\"></button>\n * ```\n *\n * @example Popover has different placements, such as: top, bottom, left and right\n * which can be used as following:\n *\n * ```\n * <button nbPopover=\"Hello, Popover!\" nbPopoverPlacement=\"left\"></button>\n * ```\n *\n * @example By default popover will try to adjust itself to maximally fit viewport\n * and provide the best user experience. It will try to change placement of the popover container.\n * If you wanna disable this behaviour just set it falsy value.\n *\n * ```\n * <button nbPopover=\"Hello, Popover!\" [nbPopoverAdjust]=\"false\"></button>\n * ```\n *\n * */\n /*\n *\n * TODO\n * Rendering strategy have to be refactored.\n * For now directive creates and deletes popover container each time.\n * I think we can handle this slightly smarter and show/hide in any situations.\n */\n@Directive({ selector: '[nbPopover]' })\nexport class NbPopoverDirective implements OnInit, OnDestroy {\n\n  /**\n   * Popover content which will be rendered in NbPopoverComponent.\n   * Available content: template ref, component and any primitive.\n   * */\n  @Input('nbPopover')\n  content: NbPopoverContent;\n\n  /**\n   * Container content context. Will be applied to the rendered component.\n   * */\n  @Input('nbPopoverContext')\n  context: Object;\n\n  /**\n   * Position will be calculated relatively host element based on the placement.\n   * Can be top, right, bottom and left.\n   * */\n  @Input('nbPopoverPlacement')\n  placement: NbPopoverPlacement = NbPopoverPlacement.TOP;\n\n  /**\n   * Container placement will be changes automatically based on this strategy if container can't fit view port.\n   * Set this property to any falsy value if you want to disable automatically adjustment.\n   * Available values: clockwise, counterclockwise.\n   * */\n  @Input('nbPopoverAdjustment')\n  adjustment: NbPopoverAdjustment = NbPopoverAdjustment.CLOCKWISE;\n\n  /**\n   * Describes when the container will be shown.\n   * Available options: click, hover and hint\n   * */\n  @Input('nbPopoverMode')\n  mode: NbPopoverMode = NbPopoverMode.CLICK;\n\n  /**\n   * Returns true if popover already shown.\n   * @return boolean\n   * */\n  get isShown(): boolean {\n    return !!this.containerRef;\n  }\n\n  /**\n   * Returns true if popover hidden.\n   * @return boolean\n   * */\n  get isHidden(): boolean {\n    return !this.containerRef;\n  }\n\n  /*\n   * Is used for unsubscribe all subscriptions after component destructuring.\n   * */\n  private alive: boolean = true;\n\n  private containerRef: ComponentRef<NbPopoverComponent>;\n\n  private get container(): NbPopoverComponent {\n    return this.containerRef.instance;\n  }\n\n  private get containerElement(): HTMLElement {\n    return this.containerRef.location.nativeElement;\n  }\n\n  private get hostElement(): HTMLElement {\n    return this.hostRef.nativeElement;\n  }\n\n  constructor(\n    private hostRef: ElementRef,\n    private themeService: NbThemeService,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    @Inject(PLATFORM_ID) private platformId,\n  ) {}\n\n  ngOnInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.registerTriggers();\n    }\n  }\n\n  ngOnDestroy() {\n    this.alive = false;\n  }\n\n  /**\n   * Show popover.\n   * */\n  show() {\n    if (this.isHidden) {\n      this.renderPopover();\n    }\n  }\n\n  /**\n   * Hide popover.\n   * */\n  hide() {\n    if (this.isShown) {\n      this.destroyPopover();\n    }\n  }\n\n  /**\n   * Toggle popover state.\n   * */\n  toggle() {\n    if (this.isShown) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  /*\n   * Adjust popover position on window resize.\n   * Window resize may change host element position, so popover relocation required.\n   *\n   * TODO\n   * Fix tslint to add capability make HostListener private.\n   * */\n  @HostListener('window:resize', ['$event'])\n  onResize() {\n    if (this.isShown) {\n      this.place();\n    }\n  }\n\n  /*\n   * Subscribe to the popover triggers created from the {@link NbPopoverDirective#mode}.\n   * see {@link NbTriggerHelper}\n   * */\n  private registerTriggers() {\n    const { open, close, toggle } = NbTriggerHelper.createTrigger(this.hostElement, () => this.containerRef, this.mode);\n\n    open.pipe(takeWhile(() => this.alive))\n      .subscribe(() => this.show());\n\n    close.pipe(takeWhile(() => this.alive))\n      .subscribe(() => this.hide());\n\n    toggle.pipe(takeWhile(() => this.alive))\n      .subscribe(() => this.toggle());\n  }\n\n  /*\n   * Renders popover putting {@link NbPopoverComponent} in the top of {@link NbLayoutComponent}\n   * and positioning container based on {@link NbPopoverDirective#placement}\n   * and {@link NbPopoverDirective#adjustment}.\n   * */\n  private renderPopover() {\n    const factory = this.componentFactoryResolver.resolveComponentFactory(NbPopoverComponent);\n    this.themeService.appendToLayoutTop(factory)\n      .pipe(takeWhile(() => this.alive))\n      .subscribe((containerRef: ComponentRef<NbPopoverComponent>) => {\n        this.containerRef = containerRef;\n        this.patchPopover(this.content, this.context);\n        /*\n         * Have to call detectChanges because on this phase {@link NbPopoverComponent} isn't inserted in the DOM\n         * and haven't got calculated size.\n         * But we should have size on this step to calculate popover position correctly.\n         *\n         * TODO\n         * I don't think we have to call detectChanges each time we're using {@link NbThemeService#appendToLayoutTop}.\n         * Investigate, maybe we can create method in the {@link NbThemeService}\n         * which will call {@link NbThemeService#appendToLayoutTop} and 'do' detectChanges,\n         * instead of performing this call by service client.\n         * */\n        this.containerRef.changeDetectorRef.detectChanges();\n        this.place();\n      });\n  }\n\n  /*\n   * Destroys the {@link NbPopoverComponent} and nullify its reference;\n   * */\n  private destroyPopover() {\n    this.containerRef.destroy();\n    this.containerRef = null;\n  }\n\n  /*\n   * Moves {@link NbPopoverComponent} relatively host component based on the {@link NbPopoverDirective#placement}.\n   * */\n  private place() {\n    const hostRect = this.hostElement.getBoundingClientRect();\n    const containerRect = this.containerElement.getBoundingClientRect();\n\n    this.adjust(containerRect, hostRect);\n  }\n\n  /*\n   * Set container content and context.\n   * */\n  private patchPopover(content: NbPopoverContent, context: Object) {\n    this.container.content = content;\n    this.container.context = context;\n  }\n\n  /*\n   * Set container placement.\n   * */\n  private patchPopoverPlacement(placement: NbPopoverPlacement) {\n    this.container.placement = placement;\n  }\n\n  /*\n   * Set container position.\n   * */\n  private patchPopoverPosition({ top: top, left: left }) {\n    this.container.positionTop = top;\n    this.container.positionLeft = left;\n  }\n\n  /*\n   * Calculates container adjustment and sets container position and placement.\n   * */\n  private adjust(containerRect: ClientRect, hostRect: ClientRect) {\n    const { placement, position } = this.performAdjustment(containerRect, hostRect);\n\n    this.patchPopoverPlacement(placement);\n    this.patchPopoverPosition(position);\n  }\n\n  /*\n   * Checks if {@link NbPopoverDirective#adjustment} can be performed and runs it.\n   * If not, just calculates element position.\n   * */\n  private performAdjustment(placed: ClientRect, host: ClientRect): NbPopoverPosition {\n    if (this.adjustment) {\n      return this.calcAdjustment(placed, host);\n    }\n\n    return this.calcPosition(placed, host);\n  }\n\n  /*\n   * Calculate adjustment.\n   * see {@link NbAdjustmentHelper}.\n   * */\n  private calcAdjustment(placed: ClientRect, host: ClientRect): NbPopoverPosition {\n    return NbAdjustmentHelper.adjust(placed, host, this.placement, this.adjustment)\n  }\n\n  /*\n   * Calculate position.\n   * see {@link NbPositioningHelper}\n   * */\n  private calcPosition(placed: ClientRect, host: ClientRect): NbPopoverPosition {\n    return {\n      position: NbPositioningHelper.calcPosition(placed, host, this.placement),\n      placement: this.placement,\n    }\n  }\n}\n"]}